https://github.com/muhammedtalo/COVID-19/blob/master/DarkCovidNet%20model%20for%20three%20classes.ipynb

from keras.models import Sequential
from keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPooling2D, ZeroPadding2D, BatchNormalization, LeakyReLU, Activation

model = Sequential()
model.add(Conv2D(filters=8, kernel_size=(3, 3), padding='same', input_shape=(256, 256, 3), use_bias=False))
model.add(BatchNormalization())
model.add(LeakyReLU())
model.add(MaxPooling2D(pool_size=2))

model.add(Conv2D(filters=16, kernel_size=(3, 3), padding='same', use_bias=False))
model.add(BatchNormalization())
model.add(LeakyReLU())
model.add(MaxPooling2D(pool_size=2))

model.add(Conv2D(filters=32, kernel_size=(3, 3), padding='same', use_bias=False))
model.add(BatchNormalization())
model.add(LeakyReLU())

model.add(ZeroPadding2D(padding=(1, 1)))
model.add(Conv2D(filters=16, kernel_size=(1, 1), padding='same', use_bias=False))
model.add(BatchNormalization())
model.add(LeakyReLU())

model.add(Conv2D(filters=32, kernel_size=(3, 3), padding='same', use_bias=False))
model.add(BatchNormalization())
model.add(LeakyReLU())
model.add(MaxPooling2D(pool_size=2))

model.add(Conv2D(filters=64, kernel_size=(3, 3), padding='same', use_bias=False))
model.add(BatchNormalization())
model.add(LeakyReLU())

model.add(ZeroPadding2D(padding=(1, 1)))
model.add(Conv2D(filters=32, kernel_size=(1, 1), padding='same', use_bias=False))
model.add(BatchNormalization())
model.add(LeakyReLU())

model.add(Conv2D(filters=64, kernel_size=(3, 3), padding='same', use_bias=False))
model.add(BatchNormalization())
model.add(LeakyReLU())
model.add(MaxPooling2D(pool_size=2))

model.add(Conv2D(filters=128, kernel_size=(3, 3), padding='same', use_bias=False))
model.add(BatchNormalization())
model.add(LeakyReLU())

model.add(ZeroPadding2D(padding=(1, 1)))
model.add(Conv2D(filters=64, kernel_size=(1, 1), padding='same', use_bias=False))
model.add(BatchNormalization())
model.add(LeakyReLU())

model.add(Conv2D(filters=128, kernel_size=(3, 3), padding='same', use_bias=False))
model.add(BatchNormalization())
model.add(LeakyReLU())
model.add(MaxPooling2D(pool_size=2))

model.add(Conv2D(filters=256, kernel_size=(3, 3), padding='same', use_bias=False))
model.add(BatchNormalization())
model.add(LeakyReLU())

model.add(ZeroPadding2D(padding=(1, 1)))
model.add(Conv2D(filters=128, kernel_size=(1, 1), padding='same', use_bias=False))
model.add(BatchNormalization())
model.add(LeakyReLU())

model.add(Conv2D(filters=256, kernel_size=(3, 3), padding='same', use_bias=False))
model.add(BatchNormalization())
model.add(LeakyReLU())

model.add(ZeroPadding2D(padding=(1, 1)))
model.add(Conv2D(filters=128, kernel_size=(1, 1), padding='same', use_bias=False))
model.add(BatchNormalization())
model.add(LeakyReLU())

model.add(Conv2D(filters=256, kernel_size=(3, 3), padding='same', use_bias=False))
model.add(BatchNormalization())
model.add(LeakyReLU())

model.add(Conv2D(filters=3, kernel_size=(3, 3), padding='same', use_bias=False))
model.add(Activation('relu'))
model.add(BatchNormalization())

model.add(Flatten())
model.add(Dense(3, activation='linear'))
